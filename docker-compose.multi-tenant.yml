# üè¢ EasyCashFlows Multi-Tenant Setup
# Deploy multipli clienti su singolo server con SSL automatico

version: '3.8'

services:
  # Nginx Proxy Manager per routing automatico e SSL
  nginx-proxy:
    image: nginxproxy/nginx-proxy:latest
    container_name: nginx-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - nginx-proxy-certs:/etc/nginx/certs
      - nginx-proxy-vhost:/etc/nginx/vhost.d
      - nginx-proxy-html:/usr/share/nginx/html
    environment:
      - DEFAULT_HOST=${DEFAULT_HOST:-easycashflows.localhost}
    labels:
      - "com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy"

  # Let's Encrypt per SSL automatico
  letsencrypt:
    image: nginxproxy/acme-companion:latest
    container_name: letsencrypt-companion
    restart: unless-stopped
    volumes:
      - nginx-proxy-certs:/etc/nginx/certs
      - nginx-proxy-vhost:/etc/nginx/vhost.d
      - nginx-proxy-html:/usr/share/nginx/html
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - acme-data:/etc/acme.sh
    environment:
      - NGINX_PROXY_CONTAINER=nginx-proxy
      - DEFAULT_EMAIL=${LETSENCRYPT_EMAIL:-admin@yourdomain.com}
    depends_on:
      - nginx-proxy

  # Template per Cliente A
  easycashflows-client-a:
    build:
      context: .
      dockerfile: Dockerfile.auto
    image: easycashflows:auto
    container_name: easycashflows-client-a
    restart: unless-stopped
    
    # Port interno, nginx-proxy gestisce il routing
    expose:
      - "5000"
    
    environment:
      - NODE_ENV=production
      - PORT=5000
      - AUTO_MIGRATE=true
      
      # Database dedicato cliente A
      - DATABASE_URL=${CLIENT_A_DATABASE_URL}
      
      # Servizi opzionali cliente A
      - SENDGRID_API_KEY=${CLIENT_A_SENDGRID_API_KEY:-}
      - TWILIO_ACCOUNT_SID=${CLIENT_A_TWILIO_ACCOUNT_SID:-}
      - TWILIO_AUTH_TOKEN=${CLIENT_A_TWILIO_AUTH_TOKEN:-}
      
      # Configurazione proxy
      - VIRTUAL_HOST=${CLIENT_A_DOMAIN:-clientea.yourdomain.com}
      - VIRTUAL_PORT=5000
      - LETSENCRYPT_HOST=${CLIENT_A_DOMAIN:-clientea.yourdomain.com}
      - LETSENCRYPT_EMAIL=${CLIENT_A_EMAIL:-admin@clientea.com}
    
    volumes:
      - client-a-data:/app/data
      - client-a-logs:/app/logs
      - client-a-backups:/app/backups
    
    labels:
      - "client=a"
      - "com.easycashflows.tenant=client-a"

  # Template per Cliente B  
  easycashflows-client-b:
    build:
      context: .
      dockerfile: Dockerfile.auto
    image: easycashflows:auto
    container_name: easycashflows-client-b
    restart: unless-stopped
    
    expose:
      - "5000"
    
    environment:
      - NODE_ENV=production
      - PORT=5000
      - AUTO_MIGRATE=true
      
      # Database dedicato cliente B
      - DATABASE_URL=${CLIENT_B_DATABASE_URL}
      
      # Servizi opzionali cliente B
      - SENDGRID_API_KEY=${CLIENT_B_SENDGRID_API_KEY:-}
      - TWILIO_ACCOUNT_SID=${CLIENT_B_TWILIO_ACCOUNT_SID:-}
      - TWILIO_AUTH_TOKEN=${CLIENT_B_TWILIO_AUTH_TOKEN:-}
      
      # Configurazione proxy
      - VIRTUAL_HOST=${CLIENT_B_DOMAIN:-clienteb.yourdomain.com}
      - VIRTUAL_PORT=5000
      - LETSENCRYPT_HOST=${CLIENT_B_DOMAIN:-clienteb.yourdomain.com}
      - LETSENCRYPT_EMAIL=${CLIENT_B_EMAIL:-admin@clienteb.com}
    
    volumes:
      - client-b-data:/app/data
      - client-b-logs:/app/logs
      - client-b-backups:/app/backups
    
    labels:
      - "client=b"
      - "com.easycashflows.tenant=client-b"

  # Template per Cliente C
  easycashflows-client-c:
    build:
      context: .
      dockerfile: Dockerfile.auto
    image: easycashflows:auto
    container_name: easycashflows-client-c
    restart: unless-stopped
    
    expose:
      - "5000"
    
    environment:
      - NODE_ENV=production
      - PORT=5000
      - AUTO_MIGRATE=true
      
      # Database dedicato cliente C
      - DATABASE_URL=${CLIENT_C_DATABASE_URL}
      
      # Servizi opzionali cliente C
      - SENDGRID_API_KEY=${CLIENT_C_SENDGRID_API_KEY:-}
      - TWILIO_ACCOUNT_SID=${CLIENT_C_TWILIO_ACCOUNT_SID:-}
      - TWILIO_AUTH_TOKEN=${CLIENT_C_TWILIO_AUTH_TOKEN:-}
      
      # Configurazione proxy
      - VIRTUAL_HOST=${CLIENT_C_DOMAIN:-clientec.yourdomain.com}
      - VIRTUAL_PORT=5000
      - LETSENCRYPT_HOST=${CLIENT_C_DOMAIN:-clientec.yourdomain.com}
      - LETSENCRYPT_EMAIL=${CLIENT_C_EMAIL:-admin@clientec.com}
    
    volumes:
      - client-c-data:/app/data
      - client-c-logs:/app/logs
      - client-c-backups:/app/backups
    
    labels:
      - "client=c"
      - "com.easycashflows.tenant=client-c"

  # Database PostgreSQL condiviso (opzionale)
  postgres-shared:
    image: postgres:15-alpine
    container_name: postgres-multi-tenant
    restart: unless-stopped
    
    environment:
      - POSTGRES_USER=easycashflows
      - POSTGRES_PASSWORD=${POSTGRES_MASTER_PASSWORD:-changeme123}
    
    volumes:
      - postgres-shared-data:/var/lib/postgresql/data
      - ./postgres-init-multi:/docker-entrypoint-initdb.d
    
    ports:
      - "5432:5432"
    
    profiles:
      - shared-db

volumes:
  # Nginx Proxy
  nginx-proxy-certs:
  nginx-proxy-vhost:
  nginx-proxy-html:
  acme-data:
  
  # Client A volumes
  client-a-data:
  client-a-logs:
  client-a-backups:
  
  # Client B volumes
  client-b-data:
  client-b-logs:
  client-b-backups:
  
  # Client C volumes
  client-c-data:
  client-c-logs:
  client-c-backups:
  
  # Shared database
  postgres-shared-data:

networks:
  default:
    name: easycashflows-multi-tenant